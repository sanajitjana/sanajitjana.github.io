<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Microservices on Sanajit Jana</title><link>https://sanajitjana.github.io/tags/microservices/</link><description>Recent content in Microservices on Sanajit Jana</description><generator>Hugo</generator><language>en-US</language><lastBuildDate>Tue, 16 Sep 2025 09:30:00 +0530</lastBuildDate><atom:link href="https://sanajitjana.github.io/tags/microservices/index.xml" rel="self" type="application/rss+xml"/><item><title>API Design and RESTful Services</title><link>https://sanajitjana.github.io/posts/api-design-and-restful-services/</link><pubDate>Tue, 16 Sep 2025 09:30:00 +0530</pubDate><guid>https://sanajitjana.github.io/posts/api-design-and-restful-services/</guid><description>&lt;h1 id="api-design-and-restful-services"&gt;API Design and RESTful Services&lt;/h1&gt;
&lt;p&gt;Well-designed APIs are the backbone of modern applications. In this post, we&amp;rsquo;ll explore RESTful API design principles and best practices.&lt;/p&gt;
&lt;h2 id="rest-principles"&gt;REST Principles&lt;/h2&gt;
&lt;h3 id="1-stateless"&gt;1. Stateless&lt;/h3&gt;
&lt;p&gt;Each request contains all information needed to process it. No server-side session state.&lt;/p&gt;
&lt;h3 id="2-client-server-architecture"&gt;2. Client-Server Architecture&lt;/h3&gt;
&lt;p&gt;Clear separation between client and server concerns.&lt;/p&gt;
&lt;h3 id="3-cacheable"&gt;3. Cacheable&lt;/h3&gt;
&lt;p&gt;Responses must define themselves as cacheable or not.&lt;/p&gt;
&lt;h3 id="4-uniform-interface"&gt;4. Uniform Interface&lt;/h3&gt;
&lt;p&gt;Consistent resource identification and manipulation.&lt;/p&gt;</description></item><item><title>Understanding Microservices Architecture</title><link>https://sanajitjana.github.io/posts/understanding-microservices-architecture/</link><pubDate>Tue, 16 Sep 2025 09:21:00 +0530</pubDate><guid>https://sanajitjana.github.io/posts/understanding-microservices-architecture/</guid><description>&lt;h1 id="understanding-microservices-architecture"&gt;Understanding Microservices Architecture&lt;/h1&gt;
&lt;p&gt;Microservices have become the go-to architecture for building scalable, maintainable applications. In this post, we&amp;rsquo;ll explore the key concepts and benefits of microservices.&lt;/p&gt;
&lt;h2 id="what-are-microservices"&gt;What are Microservices?&lt;/h2&gt;
&lt;p&gt;Microservices are a software development technique where applications are built as a collection of small, independent services that communicate over well-defined APIs.&lt;/p&gt;
&lt;h2 id="key-benefits"&gt;Key Benefits&lt;/h2&gt;
&lt;h3 id="1-scalability"&gt;1. Scalability&lt;/h3&gt;
&lt;p&gt;Each service can be scaled independently based on its specific needs.&lt;/p&gt;
&lt;h3 id="2-technology-diversity"&gt;2. Technology Diversity&lt;/h3&gt;
&lt;p&gt;Different services can use different technologies that best fit their requirements.&lt;/p&gt;</description></item></channel></rss>